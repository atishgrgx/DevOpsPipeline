pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarCloud'
        PORT = '3000'
        MONGO_URL = 'mongodb+srv://jukeboxuser:jukeboxuser@jukeboxdb.v158hmf.mongodb.net/JUKEBOXDB?retryWrites=true&w=majority&appName=JukeBoxDB'
        MONGO_SECRET_KEY = '12345678901234567890123456789012'
        JWT_SECRET = 'MyS3cr3tJwT_K3y!'
        SPOTIFY_CLIENT_ID = '715291451b004afdae8c8fd356e3c22e'
        SPOTIFY_CLIENT_SECRET = '6c0a6a201bdc4d6e9c05ec93238b6eab'
        SPOTIFY_REDIRECT_URI = 'http://127.0.0.1:3000/api/auth/spotify/callback'
        FRONTEND_URL = 'http://localhost:3000'
    }

    stages {
        stage('Build') {
            steps {
                echo 'Installing dependencies...'
                bat 'cd jukebox-backend && npm install'

                echo 'Creating build artifact (ZIP)...'
                bat 'cd jukebox-backend && if exist build-artifact.zip del build-artifact.zip && powershell Compress-Archive -Path * -DestinationPath build-artifact.zip'
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
                bat 'cd jukebox-backend && npm test || echo "No tests found or test failure ‚Äì continuing..."'
            }
        }

        stage('Code Quality') {
            steps {
                echo 'Running SonarCloud analysis...'
                withSonarQubeEnv('SonarCloud') {
                    bat 'cd jukebox-backend && npx sonar-scanner -Dsonar.projectKey=atishgrgx_jukebox -Dsonar.sources=.'
                }
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Running security scan with Snyk...'
                bat '''
                cd jukebox-backend
                npx snyk test > snyk-output.txt || exit 0
                type snyk-output.txt
                '''
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to staging environment...'
                
                // Clean up any existing processes
                bat 'taskkill /F /IM node.exe || exit 0'
                
                // Clean staging folder
                bat '''
                if exist staging-folder (
                    echo Deleting existing staging-folder...
                    rmdir /s /q staging-folder
                ) else (
                    echo staging-folder does not exist. Skipping delete.
                )
                '''
                
                // Deploy application
                bat '''
                mkdir staging-folder
                cd jukebox-backend
                powershell Expand-Archive -Path build-artifact.zip -DestinationPath ../staging-folder
                cd ../staging-folder
                npm install
                '''
                
                // Start application with proper background execution
                bat '''
                cd staging-folder
                start /B npm start
                '''
                
                // Wait for application to start
                echo '‚è≥ Waiting for application to start...'
                bat 'timeout /t 15'
                
                // Verify port is listening
                bat 'netstat -an | findstr :3000 || echo "Port 3000 not yet available"'
            }
        }

        stage('Release to Production') {
            steps {
                script {
                def version = "v1.0.${env.BUILD_NUMBER}"
                bat "git tag ${version} && git push origin ${version}"
                }
            }
        }


        stage('Monitoring') {
            steps {
                echo 'üìà Running application health checks...'
                
                script {
                    // Check if Node.js process is running
                    echo 'üîç Checking if Node.js processes are running...'
                    bat 'tasklist /FI "IMAGENAME eq node.exe" | findstr node || echo "‚ö†Ô∏è No Node.js processes found"'
                    
                    // Check if port 3000 is listening
                    echo 'üîç Checking if port 3000 is listening...'
                    bat 'netstat -an | findstr :3000 || echo "‚ö†Ô∏è Port 3000 is not listening"'
                    
                    // Try multiple endpoints to find one that works
                    echo 'üîç Trying different endpoints...'
                    
                    // Try root endpoint
                    def rootResult = bat(script: 'curl -s -f http://localhost:3000/ --connect-timeout 10', returnStatus: true)
                    if (rootResult == 0) {
                        echo '‚úÖ Root endpoint (/) is responding!'
                    } else {
                        echo '‚ùå Root endpoint (/) is not responding'
                        
                        // Try /api endpoint
                        def apiResult = bat(script: 'curl -s -f http://localhost:3000/api --connect-timeout 10', returnStatus: true)
                        if (apiResult == 0) {
                            echo 'API endpoint (/api) is responding!'
                        } else {
                            echo 'API endpoint (/api) is not responding'
                            
                            // Try /health endpoint if it exists
                            def healthResult = bat(script: 'curl -s -f http://localhost:3000/health --connect-timeout 10', returnStatus: true)
                            if (healthResult == 0) {
                                echo 'Health endpoint (/health) is responding!'
                            } else {
                                echo 'Health endpoint (/health) is not responding'
                                echo 'Application may not be fully started or endpoints may not be configured'
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
            // Optional: Clean up processes
            bat 'taskkill /F /IM node.exe || exit 0'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}